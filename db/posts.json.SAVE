{"_id":{"$oid":"561ed0f8848c4d04ecf1a20c"},"author":"Alex","content":"If you're familiar with Mr. Show, you may know the technique common to many of their most successful sketches: assiduous repetition of a single idea. It's the key to 'The Story of Everest' and 'The Audition', where the same thing happens again and again, and things gets exponentially funnier.\n\nThe sketch \u003ca href=\"https://www.youtube.com/watch?v=cGuT97v4pv0\"\u003e'Change for a Dollar'\u003c/a\u003e uses this tight repetition to play a good joke on the fate of value in the hands of pure bureaucracy. Oddly, the structure is legimately recursive and I think serves as a good (if not highly alternative) illustration of the winding-and-unwinding process of a recursive program.\n\n![Mr. Show's Bob and David](https://i.vimeocdn.com/video/199532043_640.jpg)\n\nThe gist of the sketch is that a man asks a convenience store clerk to exchange a dollar for four quarters. Instead of just saying yes or no, the clerk, after some delay, has to ask his boss for permission, and it turns out his boss must also, after some delay, ask *his* boss for permission. This continues until the original request reaches an employee with the credentials to say yes or no. At that point, the answer propagates back through each boss to the requesting underling. When that underling is the store clerk, he can tell the customer the answer.\n \nIn terms related to recursion, each scene is the execution context of a new function placed on top of the call stack that stores the state of this `change_for_a_dollar` program. If the arguments to the function are `employee` and `boss`, then at the end of the function call, we call the function again with `employee.boss` and  In each scene, the employee seeks authorization from his boss to make change for a dollar. If the employee's boss isn't able to authorize, he has to call *his* boss.\n\nBelow, I've created a basic model to represent the chain of command in this haplessly bureaucratic corporation (notice that employee5 is the only one who has the `authorize` method, meaning only he can sign off on the 'change for a dollar' request): \n\n\u003cpre\u003e\n\u003ccode class='language-javascript'\u003e\nvar employee5 = {\n  name: 'President of the United States',\n  boss: null,\n  authorize: function() {\n    return 'no';\n  }\n};\nvar employee4 = {\n  name: 'Corporate Executive',\n  boss: employee5,\n};\nvar employee3 = {\n  name:'Regional Manager',\n  boss: employee4,\n};\nvar employee2 = {\n  name:'Store Manager',\n  boss: employee3,\n};\nvar employee1 = {\n  name:'Store Clerk',\n  boss: employee2,\n};\n\u003c/code\u003e\n\u003c/pre\u003e\n\nThe five employee objects make up a singly-linked-list where each employee save the last has a reference to his boss, who has a reference to his boss, etc. We can use this structure to recurse through the list until an employee with an `authorize` method is found.\n\n\u003cpre\u003e\n\u003ccode class='language-javascript'\u003e\nvar customer = {\n  name: 'customer',\n  say: function(phrase) { console.log(phrase)},\n  getChangeForADollar: function(employee) {\n    if (employee.authorize) {\n      var answer = employee.authorize();\n      return 'the answer is ' + answer +'.'; \n    }\n    else {\n      return this.getChangeForADollar(employee.boss);\n    }\n  }\n};\n\u003c/code\u003e\n\u003c/pre\u003e\n\nWhen the `authorize` method is found on an employee, the results of that method call are returned. This is our base case, and causes each function on the call stack to resolve its return value until the original caller is reached. \n\n\u003cpre\u003e\n\u003ccode class='language-javascript'\u003e\ncustomer.say('Can I get change for a dollar?');\nconsole.log(customer.getChangeForADollar(employee1));\n\u003c/code\u003e\n\u003c/pre\u003e\n\nWhy is this not iterative?\n\nJust in case you were wondering why I'm making a big deal about this being a good example of recursion instead of iteration using a while loop, there are two reasons:\n\n  1. The context for each authorization check is a totally new location relative to the specific employee and boss involved. If the sketch demonstrated iteration (like 'Story of Everest' and 'The Audition' mentioned above), the context of the employee traversal process would be the `customer.getChangeForADollar` method throughout, aka, the whole sketch would have to take place in the convenience store. \n  2. The sketch demonstrates an explicit 'unwinding' phase where the ultimate answer is relayed from the top of the command-chain, through each boss and underling, to the caller and in exactly the reverse order of the recursive calls. I'd go so far as to say that this unwinding phase contains the punchline of the joke.  \n\nAll of this is just to demonstrate that while a *good* joke may use repetition, it is the rare comedic gem that implements it recursively! In any case, I'm sure that my analysis eventually breaks down, so if *you* are interested in telling me exactly where it does, I would be flattered. You can call me on my twitterphone, the number is simply: \u003ca href=\"https://twitter.com/drlolzrofl\"\u003e@drlolzrofl\u003c/a\u003e. \n\n[note: there are almost exclusively gendered pronouns in this post and the reason is simply that the relevant roles in the sketch are played by David Cross and Bob Odenkirk, who in fact play all of the employees and bosses.]\n","date_published":{"$date":"2015-10-14T15:02:32.083Z"},"keywords":["comedy","recursion","mr. show","javascript","jokes"],"post_id":1,"published":true,"short_text":"If you're familiar with Mr. Show, you may know the technique common to many of their most successful sketches: assiduous repetition of a single idea. It's the key to 'The Story of Everest' and 'The Audition', where the same thing happens again and again, and things gets exponentially funnier.","title":"What's the Difference Between a Good Joke and a Great Joke?"}
{"_id":{"$oid":"561edb57347b7fa7f8a7852b"},"content":"abc","title":"Difference between stuff"}
{"_id":{"$oid":"561edc17347b7fa7f8a7852c"},"content":"","title":"Diffy"}
{"_id":{"$oid":"562092db848c4d0740fadbdb"},"author":"Alex","content":"# Forward\n\nHi, I’m Alex Ramsdell, a web developer living in Seattle, and this is my forward.\n\nWhy does this website exist, you ask?  Well, it didn’t occur to me when I was younger that so many things were powered by software.  So finding that out has been pretty interesting.  In my mid twenties I started programming for an unknown reason.  This website exists as an historically frustrating and rewarding space for me to jam out about a small, small subset of amazing things about software and its construction. And also to separately jam out about design and UI. And a place to assemble the actual platform for jamming out about software and UI, which I believe is called reinventing the wheel.  Reinventing the wheel is pretty fun so expect changes.  Big, technical, monolithic, legally delayed for years and ultimately pardonable  changes to this site, all wrought by just me!\n\n# The Stack\n\nThe blog part of this site runs with the help of the following tools: MongoDB, Python, Flask, PyMongo, Frozen-Flask, HTML, CSS, SASS, Nginx and \u003cwebhost\u003e.\n\n# The Guides\n\nAdditionally, I have some short guides to Python,  JavaScript and Linux in the works that will probably be implemented as web text-books in Angular. The approach in these books is humbly informed by my single year as a community programming instructor in Massachusetts.  I hope that someone might find one of these guides when they need it like I found the GNU C tutorial and pointers were then clarified.  I love helping new programmers develop their problem-solving skills and overall programming confidence. The guides aim to be a conversational but sneakily theoretical approach to that end.\n","date_published":{"$date":"2015-10-15T23:02:03.578Z"},"keywords":["about me"],"post_id":4,"published":true,"short_text":"# Forward","title":"About Me"}
{"_id":{"$oid":"56209324848c4d074c9a8220"},"author":"Alex","content":"# Forward\n\nHi, I’m Alex Ramsdell, a web developer living in Seattle, and this is my forward.\n\nWhy does this website exist, you ask?  Well, it didn’t occur to me when I was younger that so many things were powered by software.  So finding that out has been pretty interesting.  In my mid twenties I started programming for an unknown reason.  This website exists as an historically frustrating and rewarding space for me to jam out about a small, small subset of amazing things about software and its construction. And also to separately jam out about design and UI. And a place to assemble the actual platform for jamming out about software and UI, which I believe is called reinventing the wheel.  Reinventing the wheel is pretty fun so expect changes.  Big, technical, monolithic, legally delayed for years and ultimately pardonable  changes to this site, all wrought by just me!\n\n# The Stack\n\nThe blog part of this site runs with the help of the following tools: MongoDB, Python, Flask, PyMongo, Frozen-Flask, HTML, CSS, SASS, Nginx and \u003cwebhost\u003e.\n\n# The Guides\n\nAdditionally, I have some short guides to Python,  JavaScript and Linux in the works that will probably be implemented as web text-books in Angular. The approach in these books is humbly informed by my single year as a community programming instructor in Massachusetts.  I hope that someone might find one of these guides when they need it like I found the GNU C tutorial and pointers were then clarified.  I love helping new programmers develop their problem-solving skills and overall programming confidence. The guides aim to be a conversational but sneakily theoretical approach to that end.\n","date_published":{"$date":"2015-10-15T23:03:16.744Z"},"keywords":["about me"],"post_id":5,"published":true,"short_text":"# Forward","title":"About Me"}
{"_id":{"$oid":"5635249a848c4d46c2ded8a5"},"author":"alex","content":"## Test File \n\nIn the interest of testing this blog script, I'm trying writing some markdown and going on and on and on about nothing to see if ultimately an elipsis is automatically added to this sentence, which would verify that my length check is more or less correct, as I understand correct to be, In the interest of testing this blog script, I'm trying writing some markdown and going on and on and on about nothing to see if ultimately an elipsis is automatically added to this sentence, which would verify that my length check is more or less correct, as I understand correct to be.\n\nHere is a test list\n+ 1\n+ 2\n+ 3\n","date_published":{"$date":"2015-10-31T13:29:14.114Z"},"keywords":["test post"],"post_id":6,"published":true,"short_text":"## Test File ","title":"test Post","type:":"blogpost"}
{"_id":{"$oid":"563525d3848c4d46e07abcd2"},"author":"test","content":"## Test File \n\nIn the interest of testing this blog script, I'm trying writing some markdown and going on and on and on about nothing to see if ultimately an elipsis is automatically added to this sentence, which would verify that my length check is more or less correct, as I understand correct to be, In the interest of testing this blog script, I'm trying writing some markdown and going on and on and on about nothing to see if ultimately an elipsis is automatically added to this sentence, which would verify that my length check is more or less correct, as I understand correct to be.\n\nHere is a test list\n+ 1\n+ 2\n+ 3\n+ 4\n","date_published":{"$date":"2015-10-31T13:34:27.556Z"},"keywords":["test"],"post_id":7,"published":true,"short_text":"## Test File ","title":"test updated again!","type:":"test"}
{"_id":{"$oid":"56354d9d848c4d4a229ae104"},"author":"test","content":"this is a test file after the publish refactor.\n","date_published":{"$date":"2015-10-31T16:24:13.126Z"},"keywords":["test"],"post_id":8,"published":false,"short_text":"this is a test file after the publish refactor.","title":"test","type":"test"}
{"_id":{"$oid":"56354da3848c4d4a247cbbc4"},"author":"test","content":"this is a test file after the publish refactor.\n","date_published":{"$date":"2015-10-31T16:24:19.992Z"},"keywords":[""],"post_id":9,"published":true,"short_text":"this is a test file after the publish refactor.","title":"test","type":"test"}
{"_id":{"$oid":"56354dd1848c4d4a29f24152"},"author":"","content":"this is a test file after the publish refactor.\n","date_published":{"$date":"2015-10-31T16:25:05.518Z"},"keywords":["test"],"post_id":10,"published":true,"short_text":"this is a test file after the publish refactor.","title":"Test","type":""}
