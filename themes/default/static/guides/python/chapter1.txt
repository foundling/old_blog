# Chapter I - Iteration

Let's give the name `'thing'` to the most basic sort of element that Python grants. A `'thing'` would look like this in your program:
    
+ 'Elephant'
+ 24 
+ True
+ ''

Let's call a particular sequence of `'things'`  a `'list of things'`.  A `'list of things'` might look like this:

+ ['Elephant', 24, True, '']
+ []
+ ['Elephant','Elephant','Elephant']
 
#### Accessing all of the things in a list of things

Iteration is the way we go through a list of `'things'`. The process goes like this: we start at the first thing in the list. We have access to that. Then we move to the next thing and we have access to that. Then we move to the next thing and have access to that. This continues for each item in the list.  This is how we go through a collection of data. We start at the beginning and go to the end, getting each item, one by one.  We as Python programmers don't generally have to worry about *how* that is done. Iteration is a native feature of Python because it is so useful.

Here is a list example: 

    names = ['Yi','Priya','Steve']

This line of code says, "`names` is a list and it contains the names 'Yi', 'Priya' and 'Steve'."  

Here I will iterate, or loop, through it. I want you to think about the code I'm using to loop through it and the output:

    for name in names:
        print 'name'

How many things did it print? What did it print?  

Now think about the following code, which is slightly different than the above code. 

    for name in names:
        print name

How many things did it print? What did it print?  

### Exercise:

Think about what `names` is, what `name` is, and what `'name'` is. Then define them below.

+ `names`:
+ `name`:
+ `'name'`:



