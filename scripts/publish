#!/usr/bin/env python

config = {}
config['SAVED_VERSIONS_DIR'] = '/data/web/blog/blog/static/posts/versions'

import slugify
import arrow
import datetime
import json
import os 
import pprint
import re
import sys
import pymongo
from lib import db, utils


def get_short_text(file_content, max_chars=160):
    ''' this should be revised to include as many paragraphs that fit into 160 chars '''
    return file_content.split('\n')[0] 

def append_user_values(post, collection):

    prompt_questions = {
      'title'     :'Title: ',
    }

    if collection == 'posts': 
      prompt_questions['tags'] = 'Tags: '

    for category in prompt_questions:

        raw_string = raw_input(prompt_questions[category])

        if category == 'tags':
            post[category] = [ kw.strip().lower() for kw in raw_string.split(',') ] 

        if category == 'title':
            post[category] = raw_string.strip().encode('utf-8')

    return post

def append_automatic_values(client, post, collection):

    post['content'] = open(sys.argv[1]).read().decode('utf-8')
    post['author'] = 'alex'
    post['date'] = datetime.datetime.now() 

    if collection == 'posts':
        post['short_text'] = get_short_text(post['content'])
        post['post_id'] = db.count() + 1
        post['permalink'] = slugify.slugify(post['title'])

    return post

def save_to_versions(post):
  ''' 
    take current title entered to update
    find version titles of which the name is a subset
    get the largest version number
    increment it and save a new file with the current name and the incremented version
  '''

  new_filename = post['title']
  content = post['content']
  current_date = datetime.datetime.isoformat(datetime.datetime.now())
  f = open(''.join([\
                     config['SAVED_VERSIONS_DIR'],
                     '/',
                     new_filename.replace(' ','_'),
                     '_',current_date])
           ,'w')
  f.write(content.encode('utf-8'))
  f.flush()
  f.close()

def main(db):

    userChoice = raw_input('Post type?\n0: regular post\n1: static\n').strip()
    collection = 'posts' if userChoice == '0' else 'static' 
    post = {}
    post = append_user_values(post, collection)
    post = append_automatic_values(db, post, collection)
    save_to_versions(post)
    db.insert_one(post, collection=collection)



if __name__ == '__main__':

    db = db.Database('mongodb://localhost:27017')

    if len(sys.argv) < 2:

      utils.usage()
      sys.exit(1)

    else:
        main(db)
