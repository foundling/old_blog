#!/usr/bin/env python

from collections import OrderedDict
import datetime
import json
import os
import pprint
import sys

import arrow
import pymongo
import slugify

from config import config
from lib import db, utils

prompts = {

    'collection': OrderedDict([
        ('0', 'posts'), 
        ('1', 'projects'),
        ('2', 'about me')
    ]),

    'posts': {

        'prompts': OrderedDict([
            ('tags', lambda s: [kw.strip().lower() for kw in s.split(',')]), 
            ('title', lambda s: s.strip().encode('utf-8')),
            ('short_text', lambda s: s),
        ]),

        'automatic': OrderedDict([
            ('content', lambda s: open(sys.argv[1]).read().decode('utf-8')),
            ('author', lambda s: 'alex'),
            ('date', lambda s: datetime.datetime.now()) 
        ])

    }
}

def generate_prompt_text(header=None, prompt_lines=None):

    ''' return a string of user prompt lines. '''

    prompt_lines = [

        '\n{}: {}'.format(index, prompt.replace(' ','_'))
        for index, prompt
        in enumerate(prompt_lines)

    ]

    return ''.join([ header ] + prompt_lines if header else prompt_lines) + '\n'

def get_user_values(collection):

    ''' Get post metadata that the user can supply. '''

    user_values = {}
    for prompt, fn in prompts[collection]['prompts'].iteritems():

        prompt_text = '{}:'.format(prompt)
        answer = raw_input(prompt_text)
        user_values[prompt] = fn(answer)

    return user_values

def get_automatic_values(filepath, post_title, collection):

    ''' Get post metadata that the user shouldn't need to supply. '''

    automatic_values = {

        'content': open(filepath).read().decode('utf-8'),
        'author': 'alex',
        'date': datetime.datetime.now()

    }

    if collection == 'posts':

        automatic_values['post_id'] = db.count() + 1
        automatic_values['permalink'] = slugify.slugify(post_title)

    return automatic_values

def save_to_versions(filepath, post):

    current_date = datetime.datetime.isoformat(datetime.datetime.now())
    filename = os.path.basename(filepath)
    parts = filename.rsplit('.', 1)
    new_filepath = ''.join([ 

        config['SAVED_VERSIONS_DIR'], 
        '/',
        parts[0],
        '_', 
        current_date, 
        '.' + parts[1] if len(parts) > 1 else '.no_extension'  

    ])

    with open(new_filepath,'w') as f:
        f.write(post['content'].encode('utf-8'))

def main(db, filepath):

    user_choice = None
    while not user_choice:

        prompt_text = generate_prompt_text(

            header = 'Choose a Document Type to Publish:', 
            prompt_lines = prompts['collection'].values()

        )

        user_choice = raw_input(prompt_text).strip()

    collection = prompts['collection'][user_choice]

    user_values = get_user_values(collection)
    automatic_values = get_automatic_values(filepath, user_values['title'], collection)

    post = {}
    post.update(user_values)
    post.update(automatic_values)

    print(post)
    save_to_versions(filepath, post)
    db.insert_one(post, collection=collection)

if __name__ == '__main__':


    if len(sys.argv) < 2:

        utils.usage()
        sys.exit(1)

    filepath = sys.argv[1]
    db = db.Database('mongodb://localhost:27017')
    main(db, filepath)
