#!/usr/bin/env python

try:
  import arrow
  import datetime
  import json
  import os 
  import pprint
  import re
  import sys
  import pymongo

except ImportError as err:
  utils.usage("You Probably didn't source your virtual environment. Do that and try again!", err) 
  sys.exit(1)


from config import config
from lib import utils
from lib import db

def get_short_text(file_content):
    ''' this should be as many paragraphs that fit into 160 chars '''
    return file_content.split('\n')[0] 

def append_user_values(post):
    prompt_questions = {
                            'title'   :'Title:',
                            'author'    :'Author:',
                            'keywords'  :'Keywords:',
                            'type'      :'Type:',
                            'published' :'Publish? (y/Y) [default: no/draft]:',
                       }

    for category in prompt_questions:

        raw_string = raw_input(prompt_questions[category])

        if category == 'keywords':
            ''' process keywords by splitting string, stripping, lowercasing words'''
            post[category] = [ kw.strip().lower() for kw in raw_string.split(',') ] 

        elif category == 'published':
            ''' map text to boolean values '''
            post[category] = True if raw_string.strip() in ('y','Y') else False

        else:
            post[category] = raw_string.strip()

    return post

def append_automatic_values(client, post):

    post['date_published'] = datetime.datetime.now() 
    post['content'] = open(sys.argv[1]).read().decode('utf-8')
    post['short_text'] = get_short_text(post['content'])
    post['post_id'] = len(db.find_all()) + 1

    return post

def save_to_versions(post):
  ''' 
    take current title entered to update
    find version titles of which the name is a subset
    get the largest version number
    increment it and save a new file with the current name and the incremented version
  '''

  new_filename = post['title']
  content = post['content']
  current_date = datetime.datetime.isoformat(datetime.datetime.now())
  f = open(config['versions_dir'] + '/' + new_filename + '_' + current_date, 'w')
  f.write(content)
  f.flush()
  f.close()

def main(db):

    post = {}
    post = append_user_values(post)
    post = append_automatic_values(db, post)
    save_to_versions(post)
    db.insert_one(post)



if __name__ == '__main__':

    db = db.Database('mongodb://localhost:27017')

    if len(sys.argv) < 2:

      utils.usage()
      sys.exit(1)

    else:
        main(db)
