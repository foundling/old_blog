#!/usr/bin/env python

''' This script updates a post '''

import datetime
import json
import os 
import subprocess
import sys

from lib.helpers import usage

try:
    import pymongo

except ImportError as err:
    msg = 'You probably didn\'t source your virtualenv. Do that and try again.'
    usage(msg=msg, err=err) 


def usage(msg=None, err=None):
    if err:
        print "\nThe following Modules were not Imported:"
        print '\n\n'.join( ''.join(['  ' + e + '\n']) for e in err)
        sys.exit()
    msg = msg if msg else 'usage: publish <FILENAME>'
    print msg

def connect(host='localhost',port='27017'):

    serverIsRunning = os.system('pgrep -q mongod') == 0

    if not serverIsRunning:
        print 'mongod server is not running. start it and run the script again'
        sys.exit(1)

    try:
        client = pymongo.MongoClient(''.join([
                                        'mongodb://',
                                        host,
                                        ':',
                                        port,
                                        '/',
                                        ]),
                                        connectTimeoutMS=1000
                                     )
    except pymongo.errors.ConnectionFailure:
        return False

    return client

def pipe_to_vim(content):

    import tempfile

    with tempfile.NamedTemporaryFile(suffix='task') as tempfile:
        tempfile.write(content)
        tempfile.flush()
        subprocess.call(['vim', tempfile.name])
        text = open(tempfile.name, 'r').read()
        return text

def backup_file(name, content, directory):
  os.listdir(directory)

def main():

    ## refactor this so you can fucking read it!
    ## not actually updating anything

    client = connect() or sys.exit(1)
    blog_posts = client.blog.posts
    answer = None

    while (answer not in ('y','Y')):
      title = raw_input('Enter the Title of the Post You Want to Edit:').strip()
      targets = []
      target = blog_posts.find_one({'title':title})
      if target:
        targets.append(target)
      else:
        title_largest_word = reduce(lambda x,y: x if len(x) > len(y) else y, title.split(' '))
        for post in blog_posts.find({"title":{"$regex": title_largest_word}}):
          targets.append(post)
      print 'Is one of these what you are looking for?'
      print '*'*24
      for num, post in enumerate(targets): 
        print '{}: {}'.format(num, post['title'])
      print '*'*24
      choice = int(raw_input('').strip())
      if targets[choice]:
        break
                          
    updated_text = pipe_to_vim(targets[choice].get('content',''))
    result = blog_posts.update_one({'title':title},{'$set': {'content':updated_text}})

    # write this also to published posts in /data/web/blog/blog/static/posts/versions
    print 'RESULT ',result

if __name__ == '__main__':
        main()
