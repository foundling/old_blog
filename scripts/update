#!/usr/bin/env python

''' This script updates a post '''

import datetime
import os 
import sys

from lib import db
from lib import utils

db = db.Database('mongodb://localhost:27017')

def backup_file(name, content, directory='/data/web/blog/blog/static/posts/versions'):
  os.listdir(directory)

def main():
    ''' 
    schema 
      author: string, hardcoded to be 'alex'
      post_id: int
      tags: array of lowercase strings
      content: string
      short_text: string
      permalink: url encoded string
      title: String
      date: isoformat datetime.datetime.now()
    '''

    answer = None
    targets = [] # potential posts to edit, delivered in a list
    while (answer not in ('y','Y')):
      title = raw_input('Enter the Title of the Post You Want to Edit:').strip()
      exact_match = db.find_one({'title':title})
      if exact_match:
        targets.append(exact_match)
      else:
        longest_word_in_title = reduce(lambda x,y: x if len(x) > len(y) else y, title.split())
        fuzzy_matches = db.find_all({"title":{"$regex": longest_word_in_title}})
        for post in fuzzy_matches: 
          targets.append(post)

      print 'Is one of these what you are looking for?'
      print '*'*24
      for num, post in enumerate(targets): 
        print '{}: {}'.format(num, post['title'])
      print '*'*24

      choice = int(raw_input('').strip())
      if targets[choice]:
        content = targets[choice].get('content','')
        post_title = targets[choice].get('title')
        updated_text = utils.edit_in_vim(content)
        backup_file(title, content)
        result = db.update_one({'title':post_title},{'$set': {'content':updated_text}})
        break

    # write this also to published posts in /data/web/blog/blog/static/posts/versions
    print 'UPDATE RESULT: ',result

if __name__ == '__main__':
        main()
