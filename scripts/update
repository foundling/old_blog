#!/usr/bin/env python

''' This script updates a post '''

import datetime
import json
import os 
import pprint
import subprocess
import sys

from lib.helpers import usage

try:
    import pymongo

except ImportError as err:
    msg = 'You probably didn\'t source your virtualenv. Do that and try again.'
    usage(msg=msg, err=err) 


def pipe_to_vim(content):

    import tempfile

    with tempfile.NamedTemporaryFile(suffix='task') as tempfile:
        tempfile.write(content)
        tempfile.flush()
        subprocess.call(['vim', tempfile.name])
        text = open(tempfile.name, 'r').read()
        return text

def usage(msg=None, err=None):
    if err:
        print "\nThe following Modules were not Imported:"
        print '\n\n'.join( ''.join(['  ' + e + '\n']) for e in err)
        sys.exit()
    msg = msg if msg else 'usage: publish <FILENAME>'
    print msg

def connect(host='localhost',port='27017'):

    serverIsRunning = os.system('pgrep -q mongod') == 0

    if not serverIsRunning:
        print 'mongod server is not running. start it and run the script again'
        sys.exit(1)

    try:
        client = pymongo.MongoClient(''.join([
                                        'mongodb://',
                                        host,
                                        ':',
                                        port,
                                        '/',
                                        ]),
                                        connectTimeoutMS=1000
                                     )
    except pymongo.errors.ConnectionFailure:
        return False

    return client


def main():

    # Overall process

    # get title from user
    # query mongo for a single post that matches the title
    client = connect() or sys.exit(1)
    blog_posts = client.blog.posts

    answer = None
    while (answer not in ('y','Y')):
      title = raw_input('Enter the Title of the Post You Want to Edit:').strip()
      target = blog_posts.find_one({'title':title})
      answer = raw_input( '*'*24 +
                          '\n' +
                          target['title'] + 
                          target['content'][0:100] +
                          '\n\n' +
                          '*'*24 +
                          '\n' +
                          'Is this the file you are want to edit?'
                          ).strip()
                          
    updated_text = pipe_to_vim(target['content'])
    result = blog_posts.update_one({'title':title},{'$set': {'content':updated_text}})
    print 'RESULT ',result


    # get back ids and titles for matches, or alert no match (try again) 
    # display the results in a list to the user
    # let user choose which file
    # the id of the chosen file is then used to get the post content from mongo 
    # use tempfile library to create a named tempfile
    # write post content to temp file
    # open temp file in vim with process.call(['vim',tempfilefile.name])
    # open tempfile.name, read content (as utf-8)
    # update post content field associated with that id with new content


    # map each title to a case insensitive regex expression
    # look them up in mongodb, getting only titles and ids
    # put results in a set (by id) to eliminate duplicates
    # present user with titles corresponding to set ids 

    # if the user choses an id, that's a match, fetch the whole
    # thing in mongodb
    '''
    for post in blog_posts.find({"name":{"$regex":title}}).
    client.blog.posts.find({name:post)
    client.close()
    move_to_published_dir(sys.argv[1])
    '''

if __name__ == '__main__':

        main()
