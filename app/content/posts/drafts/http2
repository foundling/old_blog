# A Look at HTTP/2


In this post I'm going to review some of the major benefits that HTTP/2 offers. In the process, I'll differentiate it from SPDY, talk about its consequences for developers, and outline some of its limitations.

#### Does it replace HTTP/1.1?

No. It's an opt-in performance enhancement. HTTP/2 is a binary protocol while HTTP/1.1 is a character-based protocol and this accounts for the version from 1.1 to 2, since the former is not backwards-compatible with the latter. Part of the assumption behind HTTP/2 is that HTTP/1.1 will not be going away any time soon. And for this reason, the semantics don't change. HTTP/2 can be thought of as an opt-in performance enhancement. 

#### Motivations
It is perhaps illuminating to consider HTTP/2 in view of its motivations, which have everything to do with developing a protocol that meets the demands of the current state of the Internet.

Today:
- Web security and confidentiality is time consuming in terms of the number of round-trip client-server requests. But as the importance of the internet to our every day communication and finances grows, security has become a paramount concern. It's clear that something which improves the performance of our security mechanisms are a great incentive for adopting more secure practices.
- JavaScript is taking on an architectural role in the form of extending web page behavior. The current culmination of this is the SPA or single-page app, where all the assets are downloaded at once and subsequent page interactions do not result in a full page reload and subsequent resource retrieval, resulting in a more comprehensive application experience.
- Page content resources like images, script files and stylesheets are growing in size.
- Internet-capable devices are proliferating, and so is network congestion.

It is a strange truth that many performance optimizations that make sense to apply to a high-traffic and mobile-accessible website today contradict best practices. Inlining CSS, concatenating JS files into a single giant file, etc, are all examples of this.

The performance enhancements come in the following changes:

+ reduction in perceived latency
+ shift from a character-based protocol to a binary protocol, length-encoded
+ header field compression (important w/ cookies) - HPACK ( compress duplicate strings sent, like UA, cookies)
+ server push
+ solving the head-of-line blocking problem: a single response delays the delivery of the rest of the resources
+ multiplexing data streams/ requests over single connection
+ prioritization of resources
+ headers and frames are sent independently



What does this mean for me as a developer?

References:

RFC
Mark Nottingham interview on SE Radio
Facebook engineer talk on HTTP/2
Nik Molnar: Full Stack Web Performance [https://vimeo.com/97415381]

